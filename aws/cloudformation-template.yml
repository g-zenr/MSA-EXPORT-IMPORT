AWSTemplateFormatVersion: "2010-09-09"
Description: "Data Export Service EC2 Instance with Security Group"

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t2.micro
      - t2.small
    Description: EC2 instance type

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the instance will be created

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID where the instance will be created

Resources:
  # Security Group for the EC2 instance
  DataExportSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Data Export Service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: Application port
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic

  # IAM Role for EC2 instance
  DataExportRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: DataExportServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: "*"

  # Instance Profile
  DataExportInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref DataExportRole

  # EC2 Instance
  DataExportInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2023 AMI (us-east-1)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref DataExportSecurityGroup
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref DataExportInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y git curl wget unzip

          # Install Node.js 18
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs

          # Install Docker
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user

          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Install Nginx
          yum install -y nginx
          systemctl enable nginx

          # Create application directory
          mkdir -p /opt/data-export-service
          cd /opt/data-export-service

          # Clone the repository (replace with your actual repo URL)
          git clone https://github.com/your-username/MSA-EXPORT-IMPORT.git .

          # Create environment file
          cat > .env << 'EOF'
          NODE_ENV=production
          PORT=3000
          LOG_LEVEL=info
          EOF

          # Build and start the application with Docker
          docker-compose up -d --build

          # Configure Nginx
          cat > /etc/nginx/conf.d/data-export.conf << 'EOF'
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF

          # Start Nginx
          systemctl start nginx

          echo "EC2 instance setup completed!"
      Tags:
        - Key: Name
          Value: DataExportService
        - Key: Environment
          Value: Production
        - Key: Project
          Value: DataExport

  # CloudWatch Log Group
  DataExportLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/data-export-service
      RetentionInDays: 30

Outputs:
  InstanceId:
    Description: Instance ID of the newly created EC2 instance
    Value: !Ref DataExportInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt DataExportInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref DataExportSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"

  ApplicationURL:
    Description: URL of the application
    Value: !Sub "http://${DataExportInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationURL"
